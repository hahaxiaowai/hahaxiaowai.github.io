import{_ as e,c as a,o as t,a8 as r}from"./chunks/framework.CfV4vhYM.js";const b=JSON.parse('{"title":"前端常见问题 面试用","description":"","frontmatter":{"title":"前端常见问题 面试用","date":"2022-02-16","categories":["web","记录"],"tags":["基础"]},"headers":[],"relativePath":"blogs/Web/interview.md","filePath":"blogs/Web/interview.md","lastUpdated":1722242476000}'),o={name:"blogs/Web/interview.md"},i=r('<h1 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>String,Number,BigInt,Object,undefined,null,Boolean,Symbol 基本类型存在栈中，引用类型实例本身存在推中，引用的数据如果是基本类型，就在栈中。</p><h2 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-label="Permalink to &quot;原型与原型链&quot;">​</a></h2><p>函数或类可以继承父类，子类可以从prototype继承父类属性与函数，这里的prototype指向父类的原型，原型链是指子类优先使用自己的函数定义及属性定义，如果自身没有，就会向父类去寻找，如果仍没有，会像父类的父类去找，直至找到或者为null</p><h1 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h1><h2 id="vue2-vue3双向绑定" tabindex="-1">vue2 vue3双向绑定 <a class="header-anchor" href="#vue2-vue3双向绑定" aria-label="Permalink to &quot;vue2 vue3双向绑定&quot;">​</a></h2><p>vue2采用的是Object.defineProperty,vue3采用的事Proxy</p>',8),n=[i];function s(l,d,u,c,h,_){return t(),a("div",null,n)}const v=e(o,[["render",s]]);export{b as __pageData,v as default};
