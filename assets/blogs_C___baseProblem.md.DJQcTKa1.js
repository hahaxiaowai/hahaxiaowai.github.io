import{_ as a,c as s,o as i,a8 as t}from"./chunks/framework.CfV4vhYM.js";const u=JSON.parse('{"title":"C++基础问题","description":"","frontmatter":{"title":"C++基础问题","date":"2022-11-23","categories":["c++","记录"],"tags":["基础"]},"headers":[],"relativePath":"blogs/C++/baseProblem.md","filePath":"blogs/C++/baseProblem.md","lastUpdated":1721993825000}'),e={name:"blogs/C++/baseProblem.md"},n=t(`<h1 id="c-基础问题" tabindex="-1">C++基础问题 <a class="header-anchor" href="#c-基础问题" aria-label="Permalink to &quot;C++基础问题&quot;">​</a></h1><h2 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h2><p>初次接触C++，很多问题都不清楚，做此积累</p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><h3 id="string-转-const-char" tabindex="-1">string 转 const char* <a class="header-anchor" href="#string-转-const-char" aria-label="Permalink to &quot;string 转 const char*&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="缺少-在-的前面" tabindex="-1">缺少 “ ; ” (在 “ ” 的前面) <a class="header-anchor" href="#缺少-在-的前面" aria-label="Permalink to &quot;缺少 “ ; ” (在 “ ” 的前面)&quot;">​</a></h3><p>头文件添加, 如果已添加，那查看一下是否哪个基础类未引用</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="类模板已定义" tabindex="-1">类模板已定义 <a class="header-anchor" href="#类模板已定义" aria-label="Permalink to &quot;类模板已定义&quot;">​</a></h3><p>可能是重复引用.h文件的导致的</p><h3 id="c-中的几种数组" tabindex="-1">C++中的几种数组 <a class="header-anchor" href="#c-中的几种数组" aria-label="Permalink to &quot;C++中的几种数组&quot;">​</a></h3><p><a href="https://blog.csdn.net/qq_37996632/article/details/104019056" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_37996632/article/details/104019056</a><a href="https://blog.csdn.net/weixin_41622043/article/details/119996012" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_41622043/article/details/119996012</a></p><h3 id="getline-找不到标识符" tabindex="-1">“getline”: 找不到标识符 <a class="header-anchor" href="#getline-找不到标识符" aria-label="Permalink to &quot;“getline”: 找不到标识符&quot;">​</a></h3><p>需要引入string</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fstream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#include </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span></span></code></pre></div><h3 id="include-区别" tabindex="-1">#include &lt;&gt; &quot;&quot; 区别 <a class="header-anchor" href="#include-区别" aria-label="Permalink to &quot;#include &lt;&gt; &quot;&quot; 区别&quot;">​</a></h3><p>&lt;&gt; 引用系统提供的类，&quot;&quot; 引用项目目录里的</p><h3 id="vs-执行时中文乱码-中文路径找不到" tabindex="-1">vs 执行时中文乱码，中文路径找不到 <a class="header-anchor" href="#vs-执行时中文乱码-中文路径找不到" aria-label="Permalink to &quot;vs 执行时中文乱码，中文路径找不到&quot;">​</a></h3><p>以下提供一个可能</p><p>排除代码的可能，是编码的问题，vs需要配置成utf-8，或者将电脑直接配置为utf-8,win11貌似是默认utf-8,但win10不是。</p><h3 id="_2061-标识符错误" tabindex="-1">2061 标识符错误 <a class="header-anchor" href="#_2061-标识符错误" aria-label="Permalink to &quot;2061 标识符错误&quot;">​</a></h3><p>除了常见的未定义标识符，未引入标识符以及命名空间等问题，还有一个可能</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b.h&quot;</span></span></code></pre></div><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a.h&quot;</span></span></code></pre></div><p>在.h文件中相互引用，也会导致这个问题，但是你可以在.cpp中引入也不会触发编译错误，目前还不知道这么做的坏处。</p>`,26),l=[n];function h(p,r,o,d,c,k){return i(),s("div",null,l)}const b=a(e,[["render",h]]);export{u as __pageData,b as default};
