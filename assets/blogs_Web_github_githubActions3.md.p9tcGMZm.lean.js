import{_ as a,o as i,c as e,a8 as t}from"./chunks/framework.BDRxOqQP.js";const E=JSON.parse('{"title":"博客搭建 | 四、GitHub Actions ssh-deploy部署至阿里云","description":"","frontmatter":{"title":"博客搭建 | 四、GitHub Actions ssh-deploy部署至阿里云","date":"2024-06-15 14:32:00","categories":["web"],"tags":["github"]},"headers":[],"relativePath":"blogs/Web/github/githubActions3.md","filePath":"blogs/Web/github/githubActions3.md","lastUpdated":1731928712000}'),h={name:"blogs/Web/github/githubActions3.md"};function n(l,s,p,r,o,k){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="博客搭建-四、github-actions-ssh-deploy部署至阿里云" tabindex="-1">博客搭建 | 四、GitHub Actions ssh-deploy部署至阿里云 <a class="header-anchor" href="#博客搭建-四、github-actions-ssh-deploy部署至阿里云" aria-label="Permalink to &quot;博客搭建 | 四、GitHub Actions ssh-deploy部署至阿里云&quot;">​</a></h1><h2 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">简述</p><p>在很久之前写了一篇如何使用github actions将博客部署到gitee上，现在，时隔两年，gitee不再提供page服务，于是打算将博客部署到自己的服务器上，以保证国内的访问速度。 如果你没有看过上一篇内容，请点击<a href="http://blog.nighttea.space/blogs/Web/github/githubActions2.html" target="_blank" rel="noreferrer">这里</a></p></div><h2 id="ssh-deploy" tabindex="-1">ssh-deploy <a class="header-anchor" href="#ssh-deploy" aria-label="Permalink to &quot;ssh-deploy&quot;">​</a></h2><p>之前的文章已经讲过关于github actions以及前几部的操作，本篇主要说明部署阿里云的操作</p><p>这个库主要用于部署至私有服务器上，通过秘钥的方式登录并操作服务器，而在使用中最大的麻烦就在于各个参数的配置上。</p><h3 id="配置actions" tabindex="-1">配置Actions <a class="header-anchor" href="#配置actions" aria-label="Permalink to &quot;配置Actions&quot;">​</a></h3><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy aliyun</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">easingthemes/ssh-deploy@v5.0.3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      #action</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      SSH_PRIVATE_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.TREE_HOLE }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #秘钥</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      SOURCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      ARGS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-avzr --delete --exclude &#39;.user.ini&#39;&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REMOTE_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.HOST }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ip</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REMOTE_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.USER }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 账号</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REMOTE_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;22&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      TARGET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.TARGET }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 部署路径</span></span></code></pre></div><h3 id="ssh-private-key" tabindex="-1">SSH_PRIVATE_KEY <a class="header-anchor" href="#ssh-private-key" aria-label="Permalink to &quot;SSH_PRIVATE_KEY&quot;">​</a></h3><p>我这里使用的ECS服务器，生成它比较简单，登录阿里云控制台，选择ECS服务器，找到 网络与安全》密钥对，点击创建密钥对，创建时会下载一个pem文件，创建后需要重启服务器，将pem文件内容复制到github secrets中，创建TREE_HOLE(叫啥都行)，注意不要多复制一行空格。</p><h3 id="source" tabindex="-1">SOURCE <a class="header-anchor" href="#source" aria-label="Permalink to &quot;SOURCE&quot;">​</a></h3><p>需要注意的是，我的博客打包后位置是常见的 dist ,但这里仍需这样写 <code>./dist/</code>，如果少写，运行可能会报错。</p><h3 id="args" tabindex="-1">ARGS <a class="header-anchor" href="#args" aria-label="Permalink to &quot;ARGS&quot;">​</a></h3><p>这个参数是可填可不填的，由于我并不熟悉服务器命令相关内容，这个参数在我这里的作用是：部署前执行一些操作。后面的命令 <code>-avzr --delete</code>, 会在部署前删除目标目录下的内容；后面的参数 <code>--exclude &#39;.user.ini&#39;</code> ,是排除目标目录下的 .user.ini 文件，使它不被删除。在博客部署中，我们需要清空上一次部署中生成的静态文件，而因为我使用的宝塔创建的站点，会在对应目录中生成配置文件，所以要排除它，否则会在执行actions时报错（虽然报错，但仍会部署成功，并不影响）</p><h3 id="remote-host" tabindex="-1">REMOTE_HOST <a class="header-anchor" href="#remote-host" aria-label="Permalink to &quot;REMOTE_HOST&quot;">​</a></h3><p>服务器ip</p><h3 id="remote-user" tabindex="-1">REMOTE_USER <a class="header-anchor" href="#remote-user" aria-label="Permalink to &quot;REMOTE_USER&quot;">​</a></h3><p>服务器账号，一般是<code>root</code></p><h3 id="remote-port" tabindex="-1">REMOTE_PORT <a class="header-anchor" href="#remote-port" aria-label="Permalink to &quot;REMOTE_PORT&quot;">​</a></h3><p>服务器ssh端口 一般是22</p><h3 id="target" tabindex="-1">TARGET <a class="header-anchor" href="#target" aria-label="Permalink to &quot;TARGET&quot;">​</a></h3><p>目标部署目录</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>该方法不仅适用于博客，同样的平日的项目也可以通过该方法进行多服务器部署，减少人工频繁操作。</p>`,24)]))}const c=a(h,[["render",n]]);export{E as __pageData,c as default};
