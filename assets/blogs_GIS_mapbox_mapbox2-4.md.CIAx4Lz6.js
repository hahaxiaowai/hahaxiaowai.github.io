import{_ as a,c as i,o as t,al as h}from"./chunks/framework.JA_jVa1h.js";const o=JSON.parse('{"title":"mapbox-gl | 2.4 文章后续计划与表达式小结","description":"","frontmatter":{"title":"mapbox-gl | 2.4 文章后续计划与表达式小结","date":"2024-01-11","categories":["GIS"],"tags":["教程","mapbox"]},"headers":[],"relativePath":"blogs/GIS/mapbox/mapbox2-4.md","filePath":"blogs/GIS/mapbox/mapbox2-4.md","lastUpdated":1743348223000}'),n={name:"blogs/GIS/mapbox/mapbox2-4.md"};function l(e,s,p,k,d,r){return t(),i("div",null,s[0]||(s[0]=[h(`<h1 id="mapbox-gl-2-4-文章后续计划与表达式小结" tabindex="-1">mapbox-gl | 2.4 文章后续计划与表达式小结 <a class="header-anchor" href="#mapbox-gl-2-4-文章后续计划与表达式小结" aria-label="Permalink to &quot;mapbox-gl | 2.4 文章后续计划与表达式小结&quot;">​</a></h1><h2 id="文章后续计划" tabindex="-1">文章后续计划 <a class="header-anchor" href="#文章后续计划" aria-label="Permalink to &quot;文章后续计划&quot;">​</a></h2><p>距离上次更新已经过去很久的时间了，转眼间mapbox也更新到了v3版本，由于个人原因更新非常迟缓，原本计划是继续讲建筑物样式的讲解，但是我发现这么做的必要性并不大，结合例子讲的单一内容很少，很多都是多个api结合，到了这一步很难做到有简单到难的这样一个渐进过程，所以我决定并不按照文章序号进行更新，即当前2.4,那么下一篇文章可能是3.x,4.x。大序号里的内容会保持统一：</p><table tabindex="0"><thead><tr><th>系列</th><th>描述</th></tr></thead><tbody><tr><td>1.x</td><td>初识</td></tr><tr><td>2.x</td><td>图层样式</td></tr><tr><td>3.x</td><td>功能</td></tr><tr><td>4.x</td><td>扩展</td></tr></tbody></table><h2 id="表达式小结" tabindex="-1">表达式小结 <a class="header-anchor" href="#表达式小结" aria-label="Permalink to &quot;表达式小结&quot;">​</a></h2><p>在2.x的前几节中，我们一直在重复使用几个表达式效果，本章将会把<strong>简单且经常</strong>用的总结一下，在本大章的后面的内容中，表达式是绕不开的核心内容。</p><h2 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h2><h3 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h3><p>获取某一字段值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取字段为name的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><h3 id="has" tabindex="-1">has <a class="header-anchor" href="#has" aria-label="Permalink to &quot;has&quot;">​</a></h3><p>是否有某一字段,返回一个bool</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;has&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否有name字段</span></span></code></pre></div><h3 id="feature-state" tabindex="-1">feature-state <a class="header-anchor" href="#feature-state" aria-label="Permalink to &quot;feature-state&quot;">​</a></h3><p>元素状态，可以通过方法给图层的一些元素添加临时属性，而这些临时属性就是元素状态，可以在不该变原数据的情况下，实现一些效果</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加元素状态的函输</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFeatureState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ source: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;states&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, id: id }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要注意这里是source的名称，如果数据源是矢量瓦片，还要指明sourceLayer，id是某一元素的id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ hover: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加hover字段并设置为true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;feature-state&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hover&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取元素状态 hover</span></span></code></pre></div><h3 id="in" tabindex="-1">in <a class="header-anchor" href="#in" aria-label="Permalink to &quot;in&quot;">​</a></h3><p>字段值是否包含在内</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// name的值是否是1,2,3中的一个值</span></span></code></pre></div><h3 id="" tabindex="-1">! <a class="header-anchor" href="#" aria-label="Permalink to &quot;!&quot;">​</a></h3><p>非，这和我们平常用到的意思是一样的，可以结合上面的<code>has</code>一起使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;has&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果有name字段，则返回false</span></span></code></pre></div><h3 id="all-any" tabindex="-1">!= &lt; &lt;= == &gt; &gt;= all any <a class="header-anchor" href="#all-any" aria-label="Permalink to &quot;!= &lt; &lt;= == &gt; &gt;= all any&quot;">​</a></h3><p>常用的大于小于这些，需要特别注意的是all和any</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果年龄小于18 返回true 其他符号类似这种用法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// all 就是 &amp;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下面的表达式的意思是年龄小于18且身高170以上 返回true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// any 就是 ||</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果将下面的all换成any，就会变成 年龄小于18或者身高170以上，返回true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;height&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">170</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><h3 id="case-match" tabindex="-1">case match <a class="header-anchor" href="#case-match" aria-label="Permalink to &quot;case match&quot;">​</a></h3><p>这两个在2.1和2.2中讲过，唯一值渲染和多级渲染会用到他们</p><h3 id="interpolate" tabindex="-1">interpolate <a class="header-anchor" href="#interpolate" aria-label="Permalink to &quot;interpolate&quot;">​</a></h3><p>插值，常用到的是线性插值，大多用于随着层级或其他值变化而插值，这会使变化的效果更加顺滑。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2-3中热力图 在不同缩放级别下设置不同的权重</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;heatmap-intensity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;interpolate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;linear&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zoom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本章节内容偏少，仅是总结了前面的内容，接下来会保证持续更新的。</p>`,32)]))}const g=a(n,[["render",l]]);export{o as __pageData,g as default};
